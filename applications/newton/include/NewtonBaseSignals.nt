#
#	Authored 2018, Phillip Stanley-Marbell, Youchao Wang.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#
#
#	Sector 1 The signals below are `derivation = none` or ` dimensionless`.
#

bits : signal =
{
	name		= "bits" English;
	symbol		= b;
	derivation	= dimensionless;
}

charge : signal =
{
	name		= "Coulomb" English;
	symbol		= C;
	derivation	= none;
}

concentration : signal =
{
	name		= "concentration" English;
	symbol		= ppm;
	derivation	= dimensionless;
}

distance : signal =
{
	name		= "meter" English;
	symbol		= m;
	derivation	= none;
}

mass : signal =
{
	name		= "kilogram" English;
	symbol		= kg;
	derivation	= none;
}

material : signal =
{
	name		= "mole" English;
	symbol		= mol;
	derivation	= none;
}

relativeHumidity : signal =
{
	name		= "Relative Humidity" English;
	symbol		= RH;
	derivation	= dimensionless;
}

temperature : signal =
{
	name		= "Kelvin" English;
	symbol		= K;
	derivation	= none;
}

time : signal =
{
	name		= "second" English;
	symbol		= s;
	derivation	= none;
}

#
#	Sector 2 The signals below are dependent upon signals in Sector 1.
#

angle : signal =
{
	name		= "degree" English;
	symbol		= deg;
	derivation	= distance / distance;
}

angularDisplacement : signal =
{
	name		= "radian" English;
	symbol		= rad;
	derivation	= distance / distance;
}

area : signal =
{
	name		= "squares" English;
	symbol		= sq;
	derivation	= distance ** 2;
}

current : signal = 
{
	name		= "Ampere" English;
	symbol		= A;
	derivation	= charge / time;
}

frequency : signal =
{
	name		= "Hertz" English;
	symbol		= Hz;
	derivation	= 1 / time;
}

magneticFluxDensity : signal =
{
	name		= "Tesla" English;
	symbol		= T;
	derivation	= mass / (charge * time);
}

speed : signal =
{
	name		= "jiffies" English;
	symbol		= jf;
	derivation	= distance / time;
}

volume : signal =
{
	name		= "cubes" English;
	symbol		= cubic;
	derivation	= distance ** 3;
}

#
#	Sector 3 Here are the rest of the signals.
#	KEEP IN MIND THE SIGNALS NEED TO BE DECLARED BEFORE USING.
#

acceleration : signal =
{
	name		= "metajiffies" English;
	symbol		= mjf;
	derivation	= speed / time;
}

angularRate : signal =
{
	name		= "anglejiffies" English;
	symbol		= ajf;
	derivation	= angle / time;
}

force : signal =
{
	name		= "Newton" English;
	symbol		= N;
	derivation	= mass * acceleration;
}

pressure : signal =
{
	name		= "Pascal" English;
	symbol		= Pa;
	derivation	= force / area;
}

work : signal = 
{
	name		= "Joule" English;
	symbol		= J;
	derivation	= force * distance;
}

power : signal = 
{
	name		= "Watts" English;
	symbol		= W;
	derivation	= work / time;
}

#
#	Sector 4 Constants.
#

kNewtonUnitfree_pi				: constant = 3.1415926535897932384626433832795;

#
#	The data below are from Mathematica Version 9's PhysicalConstants community-created package.
#

kNewtonUnithave_AccelerationDueToGravity	: constant = (196133 / 20000) * meter * (second ** -2);
kNewtonUnithave_AvogadroConstant		: constant = (6.02214E23) * mole;
kNewtonUnithave_BoltzmannConstant		: constant = (1.38065E-23) * Joule / Kelvin;
kNewtonUnithave_EarthMass			: constant = (5.9742E24) * kilogram;
kNewtonUnithave_ElectronCharge			: constant = (1.60218E-19) * Coulomb;
kNewtonUnithave_GravitationalConstant		: constant = ((6.67428E-11) * meter ** 3) * (kilogram ** -1) * (second ** -2);
kNewtonUnithave_SpeedOfLight			: constant = 299792458 * meter * (second ** -1);
kNewtonUnithave_SpeedOfSound			: constant = 340.292 * meter * (second ** -1);


#	--
#	--
#	--		From MIT 6.826 POCS, Chapter 3 (Lampson / Rinard)
#	--
#	
#	--
#	--		The dimension / 'type' for the Xs
#	--
#	U1 : reals = <1.0 ... 100.0 delta 0.1*iota>
#	
#	
#	--
#	--		The dimension / 'type' for the Ys (square roots)
#	--
#	U2 : reals = <1.0 ... 100.0 delta 0.1*iota>
#	
#	--
#	--		The dimension / 'type' for the tuples of values and their (possibly-approximate) square roots
#	--
#	U3 = U1 >< U2
#	
#	--
#	--
#	--		Spec: CONST eps := 10**-8
#	--
#	--		Set a register to hold value of epsilon. Real-valued registers in Svm are Rnnn
#	--
#	R1 = 0.00000001
#	
#	--
#	--		Spec: << VAR y : Real | Abs(x - y*y) < eps => RET y >>
#	--
#	--		Since Sal doesnt have an ABS operator, we square both sides of the expression to achieve the same effect
#	--
#	P1 = (x:U3[1] - (y:U3[2] * y:U3[2]))*(x:U3[1] - (y:U3[2] * y:U3[2])) < R1*R1
#	
#	S1 = (P1 : U3)
#	
#	print enum S1
#	print info S1

mit6826sqrt : progtype
{
	init	: namegen (list of string):(list of string);
}


#
#	Problem definition
#
init =>
{
}


#
#	Algorithm implementation
#
init =
{
}

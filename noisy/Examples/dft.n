#	--
#	--	DFT Example (This version requires at least 73 RREGS. Make sure your Svm has enough).
#	--
#	--
#	--
#	--  *** NOTE:  This Sal problem specification requires Svm version 0.6-alpha or newer ***
#	--
#	--
#	--
#	--	Re[Fourier[{0.0, 1.0, 2.0, 4.0, 4.0, 2.0, 1.0, 0.0}, FourierParameters -> {1, -1}]]
#	--
#	--		= {14., -7.53553, 1., -0.464466, 0., -0.464466, 1., -7.53553}
#	--
#	
#	
#	--
#	--	These ioregs contain the input sample values, drawn from universe U???
#	--
#	R0 = 0.
#	R1 = 1.
#	R2 = 2.
#	R3 = 4.
#	R4 = 4.
#	R5 = 2.
#	R6 = 1.
#	R7 = 0.
#	
#	R8 = -20.0
#	R9 = 20.0
#	
#	
#	I0 = 0
#	I1 = 1
#	I2 = 2
#	I3 = 3
#	I4 = 4
#	I5 = 5
#	I6 = 6
#	I7 = 7
#	
#	I8 = 0
#	I9 = 7
#	
#	
#	
#	--
#	--	The 64 twiddle factors for 8-point DFT 
#	--
#	R10 = +1.000000
#	R11 = +1.000000
#	R12 = +1.000000
#	R13 = +1.000000
#	R14 = +1.000000
#	R15 = +1.000000
#	R16 = +1.000000
#	R17 = +1.000000
#	
#	R18 = +1.000000
#	R19 = +0.707107
#	R20 = +0.000000
#	R21 = -0.707107
#	R22 = -1.000000
#	R23 = -0.707107
#	R24 = +0.000000
#	R25 = +0.707107
#	
#	R26 = +1.000000
#	R27 = +0.000000
#	R28 = -1.000000
#	R29 = +0.000000
#	R30 = +1.000000
#	R31 = +0.000000
#	R32 = -1.000000
#	R33 = +0.000000
#	
#	R34 = +1.000000
#	R35 = -0.707107
#	R36 = +0.000000
#	R37 = +0.707107
#	R38 = -1.000000
#	R39 = +0.707107
#	R40 = +0.000000
#	R41 = -0.707107
#	
#	R42 = +1.000000
#	R43 = -1.000000
#	R44 = +1.000000
#	R45 = -1.000000
#	R46 = +1.000000
#	R47 = -1.000000
#	R48 = +1.000000
#	R49 = -1.000000
#	
#	R50 = +1.000000
#	R51 = -0.707107
#	R52 = +0.000000
#	R53 = +0.707107
#	R54 = -1.000000
#	R55 = +0.707107
#	R56 = +0.000000
#	R57 = -0.707107
#	
#	R58 = +1.000000
#	R59 = +0.000000
#	R60 = -1.000000
#	R61 = +0.000000
#	R62 = +1.000000
#	R63 = +0.000000
#	R64 = -1.000000
#	R65 = +0.000000
#	
#	R66 = +1.000000
#	R67 = +0.707107
#	R68 = +0.000000
#	R69 = -0.707107
#	R70 = -1.000000
#	R71 = -0.707107
#	R72 = +0.000000
#	R73 = +0.707107
#	
#	
#	U0 : integers = <I8 ... I9>
#	U1 : reals = <R8 ... R9 delta 0.1*iota>
#	U2 = U0 >< U1
#	
#	
#	--
#	--	Tuples corresponding to the input data (indices and values are from ioregs)
#	--
#	S0 = {(I0, R0), (I1, R1), (I2, R2), (I3, R3), (I4, R4), (I5, R5), (I6, R6), (I7, R7)} : U2
#	
#	
#	--
#	--	Predicate defining properties of each Fourier domain point. 
#	--
#	P0 = (_:U2[2] ==@0.05 (sum tidx:U0[1] from I8 to I9 step 1 of rmem[tidx]*rmem[10+(_:U2[1]*8)+tidx]))
#	
#	--
#	--	The output tuples
#	--
#	S1 = (P0 : U2)
#	
#	print enum S0
#	--print enum S1
#	
#	minfo
#	--luregs
#	--liregs
#	--lwregs
#	--lrregs


dft : progtype
{
	init	: namegen (list of string):(list of string);
}


#
#	Problem definition
#
init =>
{
}


#
#	Algorithm implementation
#
init =
{
}

#	--
#	--	Sort (integers): version 1
#	--
#	
#	--	Type for values
#	U0 : integers = <0 ... 100>
#	
#	--	Type for indices
#	U1 : integers = <0 ... 10>
#	
#	--	Tuples of values and their indices
#	U2 = U0 >< U1
#	
#	--	Input
#	S0 = {(12, 0), (2, 1), (14, 2), (1, 3), (7, 4)} : U2
#	print enum S0
#	
#	--
#	--	Rather than making the comparison against val:U2[1]
#	--	we create a bound variable tmpval that equals
#	--	the free variable var:U2[1], so that we can have
#	--	that value inside a predicate on universe U0; otherwise,
#	--	we currently do not permit free vars of type different
#	--	from the universe to which the predicate in which
#	--	they are contained, is applied to. We could change
#	--	the restriction, but I currently feel more comfortable
#	--	keeping the restriction.
#	--
#	S1 = (abstract S0 2) # ((_:U0[1] <= tmpval) : U0)
#	
#	--
#	--   
#	--
#	P0 =	exists tmpval:U2[1] tmpval == val:U2[1] &
#		(val:U2[1] in (abstract S0 2)) &
#		(idx:U2[2] in (abstract S0 1)) &
#		(|S1| == idx:U2[2] + 1)
#	
#	S2 = (P0 : U2)
#	     
#	echo "Input (in register S0)  = " print enum S0
#	
#	--	We cant print enum S1 because the bound variable tmpvar has no 
#	--	binder therein (S1 is only intended to be used inside P0)
#	--echo "S1 = " print enum S1
#	
#	echo "Output (in register S2) = " print enum S2
#	
#	print dot p0 "p0.dot"

sortIntegers : progtype
{
	init	: namegen (list of string):(list of string);
}


#
#	Problem definition
#
init =>
{
}


#
#	Algorithm implementation
#
init =
{
}

#	U1	: Reals = <0. ... 100. delta 1.0*iota>
#	U2	= U1 >< U1
#	
#	--
#	--	The following predicate, applied to any 2D universe of Reals, yields the
#	--	members (i, Fi) of the universe in which the Fi is the ith Fibonacci number.
#	--
#	P1	= (Fi:U2[2] == (((((1. + (5. pow 0.5))/2.) pow i:U2[1]) / (5. pow 0.5)) + 0.5) - ((((((1. + (5. pow 0.5))/2.) pow i:U2[1]) / (5. pow 0.5)) + 0.5) % 1.0))
#	
#	S1	= (P1 : U2)
#	print enum S1

#
#	Problem definition
#
#init =>
#{
#}


#
#	Algorithm implementation
#
#init =
#{
#}

fibonacci : progtype
{
   fib : namegen (int):(int);
}

fib : (int) : (int) =
{
 v := <-fib;
 
 matchseq
 {
   (v == 0) =>
   {
       fib <-= 0;
   }
   
   (v == 1) =>
   {
       fib <-= 1;
   }
   
   true =>
   {
     c1, c2 := name2chan int "fib" 0.0;
     c1 <-= (v - 1);
     c2 <-= (v - 2);
     r <-= <-c1 + <-c2;
   }
 };
}

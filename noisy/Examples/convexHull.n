#	--
#	--	Compute the convex hull of any 2D universe, U2, of integers. (A sample
#	--	U2 is declared below.)
#	--
#	--	This formulation is similar in style to the SlowConvexHull algorithm
#	--	given on page 3 of de Berg, van Kreveld, Overmars & Schwartzkopf.
#	--
#	--	The sign of the determinant
#	--
#	--			| 1 px py |
#	--		D =	| 1 qx qy |  = (qx*ry - qy*rx) - px(ry - qy) + py(rx-qx),
#	--			| 1 rx ry |
#	--
#	--	denotes whether r is on left or right of line pq.
#	--
#	U0		:  Integers = <1 ... 10 delta 2*iota>
#	U1		:  Integers = <1 ... 10 delta (2*iota)+1>
#	U2		= U0 >< U1
#	
#	
#	P10		= !((qy == py:U2[2]) & (qx == px:U2[1]))
#	P11		= ((qx*ry - qy*rx) - px:U2[1]*(ry - qy) + py:U2[2]*(rx - qx)) >= 0
#	
#	P20		= ((qy > py:U2[2]) & (qx < px:U2[1]) & P11)
#	P21		= ((qy > py:U2[2]) & (qx > px:U2[1]) & P11)
#	P22		= ((qy < py:U2[2]) & (qx < px:U2[1]) & P11)
#	P23		= ((qy < py:U2[2]) & (qx > px:U2[1]) & P11)
#	
#	P24		= ((qy == py:U2[2]) & (qx > px:U2[1]) & P11) 
#	P25		= ((qx == px:U2[1]) & (qy > py:U2[2]) & P11) 
#	P26		= ((qy == py:U2[2]) & (qx < px:U2[1]) & P11) 
#	P27		= ((qx == px:U2[1]) & (qy < py:U2[2]) & P11)  
#	
#	P1		= exists qx:U2[1] exists qy:U2[2] forall rx:U2[1] forall ry:U2[2] (P10 & (P20|P21|P22|P23|P24|P25|P26|P27))
#	
#	
#	S1 		= (true	: U2)
#	S2		= (P1	: U2)
#	
#	--echo		"S1 = " print enum S1
#	--print		info S1
#	--echo		"S2 = " print enum S2
#	print		info S2


convexHull : progtype
{
	init	: namegen (list of string):(list of string);
}


#
#	Problem definition
#
init =>
{
}


#
#	Algorithm implementation
#
init =
{
}
